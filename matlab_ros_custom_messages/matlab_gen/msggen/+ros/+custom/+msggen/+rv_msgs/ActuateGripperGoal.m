classdef ActuateGripperGoal < ros.Message
    %ActuateGripperGoal MATLAB implementation of rv_msgs/ActuateGripperGoal
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rv_msgs/ActuateGripperGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '8eb79493082742f258e2cacb7bd94247' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        MODESTATIC = int8(0)
        MODEGRASP = int8(1)
        STATECLOSED = int8(0)
        STATEOPEN = int8(1)
    end
    
    properties (Dependent)
        Mode
        State
        Width
        Force
        Speed
        EInner
        EOuter
    end
    
    properties (Constant, Hidden)
        PropertyList = {'EInner', 'EOuter', 'Force', 'Mode', 'Speed', 'State', 'Width'} % List of non-constant message properties
        ROSPropertyList = {'e_inner', 'e_outer', 'force', 'mode', 'speed', 'state', 'width'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ActuateGripperGoal(msg)
            %ActuateGripperGoal Construct the message object ActuateGripperGoal
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function mode = get.Mode(obj)
            %get.Mode Get the value for property Mode
            mode = int8(obj.JavaMessage.getMode);
        end
        
        function set.Mode(obj, mode)
            %set.Mode Set the value for property Mode
            validateattributes(mode, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'Mode');
            
            obj.JavaMessage.setMode(mode);
        end
        
        function state = get.State(obj)
            %get.State Get the value for property State
            state = int8(obj.JavaMessage.getState);
        end
        
        function set.State(obj, state)
            %set.State Set the value for property State
            validateattributes(state, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'State');
            
            obj.JavaMessage.setState(state);
        end
        
        function width = get.Width(obj)
            %get.Width Get the value for property Width
            width = double(obj.JavaMessage.getWidth);
        end
        
        function set.Width(obj, width)
            %set.Width Set the value for property Width
            validateattributes(width, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'Width');
            
            obj.JavaMessage.setWidth(width);
        end
        
        function force = get.Force(obj)
            %get.Force Get the value for property Force
            force = double(obj.JavaMessage.getForce);
        end
        
        function set.Force(obj, force)
            %set.Force Set the value for property Force
            validateattributes(force, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'Force');
            
            obj.JavaMessage.setForce(force);
        end
        
        function speed = get.Speed(obj)
            %get.Speed Get the value for property Speed
            speed = double(obj.JavaMessage.getSpeed);
        end
        
        function set.Speed(obj, speed)
            %set.Speed Set the value for property Speed
            validateattributes(speed, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'Speed');
            
            obj.JavaMessage.setSpeed(speed);
        end
        
        function einner = get.EInner(obj)
            %get.EInner Get the value for property EInner
            einner = double(obj.JavaMessage.getEInner);
        end
        
        function set.EInner(obj, einner)
            %set.EInner Set the value for property EInner
            validateattributes(einner, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'EInner');
            
            obj.JavaMessage.setEInner(einner);
        end
        
        function eouter = get.EOuter(obj)
            %get.EOuter Get the value for property EOuter
            eouter = double(obj.JavaMessage.getEOuter);
        end
        
        function set.EOuter(obj, eouter)
            %set.EOuter Set the value for property EOuter
            validateattributes(eouter, {'numeric'}, {'nonempty', 'scalar'}, 'ActuateGripperGoal', 'EOuter');
            
            obj.JavaMessage.setEOuter(eouter);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Mode = obj.Mode;
            cpObj.State = obj.State;
            cpObj.Width = obj.Width;
            cpObj.Force = obj.Force;
            cpObj.Speed = obj.Speed;
            cpObj.EInner = obj.EInner;
            cpObj.EOuter = obj.EOuter;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Mode = strObj.Mode;
            obj.State = strObj.State;
            obj.Width = strObj.Width;
            obj.Force = strObj.Force;
            obj.Speed = strObj.Speed;
            obj.EInner = strObj.EInner;
            obj.EOuter = strObj.EOuter;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Mode = obj.Mode;
            strObj.State = obj.State;
            strObj.Width = obj.Width;
            strObj.Force = obj.Force;
            strObj.Speed = obj.Speed;
            strObj.EInner = obj.EInner;
            strObj.EOuter = obj.EOuter;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rv_msgs.ActuateGripperGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rv_msgs.ActuateGripperGoal;
            obj.reload(strObj);
        end
    end
end
