classdef ManipulatorState < ros.Message
    %ManipulatorState MATLAB implementation of rv_msgs/ManipulatorState
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rv_msgs/ManipulatorState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2d16e7cb66163dabbd2807cdc8506875' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        ESTOP = uint16(1)
        COLLISION = uint16(2)
        JOINTLIMITVIOLATION = uint16(4)
        TORQUELIMITVIOLATION = uint16(8)
        CARTESIANLIMITVIOLATION = uint16(16)
        OTHER = uint16(32768)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseStampedClass = ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/PoseStamped') % Dispatch to MATLAB class for message type geometry_msgs/PoseStamped
    end
    
    properties (Dependent)
        EePose
        Errors
        JointPoses
        JointTorques
        CartesianCollision
        CartesianContact
    end
    
    properties (Access = protected)
        Cache = struct('EePose', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CartesianCollision', 'CartesianContact', 'EePose', 'Errors', 'JointPoses', 'JointTorques'} % List of non-constant message properties
        ROSPropertyList = {'cartesian_collision', 'cartesian_contact', 'ee_pose', 'errors', 'joint_poses', 'joint_torques'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ManipulatorState(msg)
            %ManipulatorState Construct the message object ManipulatorState
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function eepose = get.EePose(obj)
            %get.EePose Get the value for property EePose
            if isempty(obj.Cache.EePose)
                obj.Cache.EePose = feval(obj.GeometryMsgsPoseStampedClass, obj.JavaMessage.getEePose);
            end
            eepose = obj.Cache.EePose;
        end
        
        function set.EePose(obj, eepose)
            %set.EePose Set the value for property EePose
            validateattributes(eepose, {obj.GeometryMsgsPoseStampedClass}, {'nonempty', 'scalar'}, 'ManipulatorState', 'EePose');
            
            obj.JavaMessage.setEePose(eepose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.EePose)
                obj.Cache.EePose.setJavaObject(eepose.getJavaObject);
            end
        end
        
        function errors = get.Errors(obj)
            %get.Errors Get the value for property Errors
            errors = typecast(int16(obj.JavaMessage.getErrors), 'uint16');
        end
        
        function set.Errors(obj, errors)
            %set.Errors Set the value for property Errors
            validateattributes(errors, {'numeric'}, {'nonempty', 'scalar'}, 'ManipulatorState', 'Errors');
            
            obj.JavaMessage.setErrors(errors);
        end
        
        function jointposes = get.JointPoses(obj)
            %get.JointPoses Get the value for property JointPoses
            javaArray = obj.JavaMessage.getJointPoses;
            array = obj.readJavaArray(javaArray, 'double');
            jointposes = double(array);
        end
        
        function set.JointPoses(obj, jointposes)
            %set.JointPoses Set the value for property JointPoses
            if ~isvector(jointposes) && isempty(jointposes)
                % Allow empty [] input
                jointposes = double.empty(0,1);
            end
            
            validateattributes(jointposes, {'numeric'}, {'vector'}, 'ManipulatorState', 'JointPoses');
            
            javaArray = obj.JavaMessage.getJointPoses;
            array = obj.writeJavaArray(jointposes, javaArray, 'double');
            obj.JavaMessage.setJointPoses(array);
        end
        
        function jointtorques = get.JointTorques(obj)
            %get.JointTorques Get the value for property JointTorques
            javaArray = obj.JavaMessage.getJointTorques;
            array = obj.readJavaArray(javaArray, 'double');
            jointtorques = double(array);
        end
        
        function set.JointTorques(obj, jointtorques)
            %set.JointTorques Set the value for property JointTorques
            if ~isvector(jointtorques) && isempty(jointtorques)
                % Allow empty [] input
                jointtorques = double.empty(0,1);
            end
            
            validateattributes(jointtorques, {'numeric'}, {'vector'}, 'ManipulatorState', 'JointTorques');
            
            javaArray = obj.JavaMessage.getJointTorques;
            array = obj.writeJavaArray(jointtorques, javaArray, 'double');
            obj.JavaMessage.setJointTorques(array);
        end
        
        function cartesiancollision = get.CartesianCollision(obj)
            %get.CartesianCollision Get the value for property CartesianCollision
            javaArray = obj.JavaMessage.getCartesianCollision;
            array = obj.readJavaArray(javaArray, 'int32');
            cartesiancollision = int32(array);
        end
        
        function set.CartesianCollision(obj, cartesiancollision)
            %set.CartesianCollision Set the value for property CartesianCollision
            validateattributes(cartesiancollision, {'numeric'}, {'vector', 'numel', 6}, 'ManipulatorState', 'CartesianCollision');
            
            javaArray = obj.JavaMessage.getCartesianCollision;
            array = obj.writeJavaArray(cartesiancollision, javaArray, 'int32');
            obj.JavaMessage.setCartesianCollision(array);
        end
        
        function cartesiancontact = get.CartesianContact(obj)
            %get.CartesianContact Get the value for property CartesianContact
            javaArray = obj.JavaMessage.getCartesianContact;
            array = obj.readJavaArray(javaArray, 'int32');
            cartesiancontact = int32(array);
        end
        
        function set.CartesianContact(obj, cartesiancontact)
            %set.CartesianContact Set the value for property CartesianContact
            validateattributes(cartesiancontact, {'numeric'}, {'vector', 'numel', 6}, 'ManipulatorState', 'CartesianContact');
            
            javaArray = obj.JavaMessage.getCartesianContact;
            array = obj.writeJavaArray(cartesiancontact, javaArray, 'int32');
            obj.JavaMessage.setCartesianContact(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.EePose = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Errors = obj.Errors;
            cpObj.JointPoses = obj.JointPoses;
            cpObj.JointTorques = obj.JointTorques;
            cpObj.CartesianCollision = obj.CartesianCollision;
            cpObj.CartesianContact = obj.CartesianContact;
            
            % Recursively copy compound properties
            cpObj.EePose = copy(obj.EePose);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Errors = strObj.Errors;
            obj.JointPoses = strObj.JointPoses;
            obj.JointTorques = strObj.JointTorques;
            obj.CartesianCollision = strObj.CartesianCollision;
            obj.CartesianContact = strObj.CartesianContact;
            obj.EePose = feval([obj.GeometryMsgsPoseStampedClass '.loadobj'], strObj.EePose);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Errors = obj.Errors;
            strObj.JointPoses = obj.JointPoses;
            strObj.JointTorques = obj.JointTorques;
            strObj.CartesianCollision = obj.CartesianCollision;
            strObj.CartesianContact = obj.CartesianContact;
            strObj.EePose = saveobj(obj.EePose);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rv_msgs.ManipulatorState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rv_msgs.ManipulatorState;
            obj.reload(strObj);
        end
    end
end
