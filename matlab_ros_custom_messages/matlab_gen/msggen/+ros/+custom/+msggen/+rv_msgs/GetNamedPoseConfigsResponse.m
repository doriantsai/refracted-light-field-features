classdef GetNamedPoseConfigsResponse < ros.Message
    %GetNamedPoseConfigsResponse MATLAB implementation of rv_msgs/GetNamedPoseConfigsResponse
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rv_msgs/GetNamedPoseConfigsResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6ca793b96aeee06d34a831db8c8656e7' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Configs
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Configs'} % List of non-constant message properties
        ROSPropertyList = {'configs'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GetNamedPoseConfigsResponse(msg)
            %GetNamedPoseConfigsResponse Construct the message object GetNamedPoseConfigsResponse
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function configs = get.Configs(obj)
            %get.Configs Get the value for property Configs
            configs = char(obj.JavaMessage.getConfigs);
        end
        
        function set.Configs(obj, configs)
            %set.Configs Set the value for property Configs
            configs = convertStringsToChars(configs);
            
            validateattributes(configs, {'char', 'string'}, {}, 'GetNamedPoseConfigsResponse', 'Configs');
            
            obj.JavaMessage.setConfigs(configs);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Configs = obj.Configs;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Configs = strObj.Configs;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Configs = obj.Configs;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rv_msgs.GetNamedPoseConfigsResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rv_msgs.GetNamedPoseConfigsResponse;
            obj.reload(strObj);
        end
    end
end
