classdef Observation < ros.Message
    %Observation MATLAB implementation of rv_msgs/Observation
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'rv_msgs/Observation' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '8c0fd7e49e95be23ed06841f7759c221' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        RvMsgsDetectionClass = ros.msg.internal.MessageFactory.getClassForType('rv_msgs/Detection') % Dispatch to MATLAB class for message type rv_msgs/Detection
        SensorMsgsCameraInfoClass = ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/CameraInfo') % Dispatch to MATLAB class for message type sensor_msgs/CameraInfo
        SensorMsgsImageClass = ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/Image') % Dispatch to MATLAB class for message type sensor_msgs/Image
    end
    
    properties (Dependent)
        DepthInfo
        DepthImage
        RgbInfo
        RgbImage
        Detections
    end
    
    properties (Access = protected)
        Cache = struct('DepthInfo', [], 'DepthImage', [], 'RgbInfo', [], 'RgbImage', [], 'Detections', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DepthImage', 'DepthInfo', 'Detections', 'RgbImage', 'RgbInfo'} % List of non-constant message properties
        ROSPropertyList = {'depth_image', 'depth_info', 'detections', 'rgb_image', 'rgb_info'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Observation(msg)
            %Observation Construct the message object Observation
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function depthinfo = get.DepthInfo(obj)
            %get.DepthInfo Get the value for property DepthInfo
            if isempty(obj.Cache.DepthInfo)
                obj.Cache.DepthInfo = feval(obj.SensorMsgsCameraInfoClass, obj.JavaMessage.getDepthInfo);
            end
            depthinfo = obj.Cache.DepthInfo;
        end
        
        function set.DepthInfo(obj, depthinfo)
            %set.DepthInfo Set the value for property DepthInfo
            validateattributes(depthinfo, {obj.SensorMsgsCameraInfoClass}, {'nonempty', 'scalar'}, 'Observation', 'DepthInfo');
            
            obj.JavaMessage.setDepthInfo(depthinfo.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DepthInfo)
                obj.Cache.DepthInfo.setJavaObject(depthinfo.getJavaObject);
            end
        end
        
        function depthimage = get.DepthImage(obj)
            %get.DepthImage Get the value for property DepthImage
            if isempty(obj.Cache.DepthImage)
                obj.Cache.DepthImage = feval(obj.SensorMsgsImageClass, obj.JavaMessage.getDepthImage);
            end
            depthimage = obj.Cache.DepthImage;
        end
        
        function set.DepthImage(obj, depthimage)
            %set.DepthImage Set the value for property DepthImage
            validateattributes(depthimage, {obj.SensorMsgsImageClass}, {'nonempty', 'scalar'}, 'Observation', 'DepthImage');
            
            obj.JavaMessage.setDepthImage(depthimage.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DepthImage)
                obj.Cache.DepthImage.setJavaObject(depthimage.getJavaObject);
            end
        end
        
        function rgbinfo = get.RgbInfo(obj)
            %get.RgbInfo Get the value for property RgbInfo
            if isempty(obj.Cache.RgbInfo)
                obj.Cache.RgbInfo = feval(obj.SensorMsgsCameraInfoClass, obj.JavaMessage.getRgbInfo);
            end
            rgbinfo = obj.Cache.RgbInfo;
        end
        
        function set.RgbInfo(obj, rgbinfo)
            %set.RgbInfo Set the value for property RgbInfo
            validateattributes(rgbinfo, {obj.SensorMsgsCameraInfoClass}, {'nonempty', 'scalar'}, 'Observation', 'RgbInfo');
            
            obj.JavaMessage.setRgbInfo(rgbinfo.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RgbInfo)
                obj.Cache.RgbInfo.setJavaObject(rgbinfo.getJavaObject);
            end
        end
        
        function rgbimage = get.RgbImage(obj)
            %get.RgbImage Get the value for property RgbImage
            if isempty(obj.Cache.RgbImage)
                obj.Cache.RgbImage = feval(obj.SensorMsgsImageClass, obj.JavaMessage.getRgbImage);
            end
            rgbimage = obj.Cache.RgbImage;
        end
        
        function set.RgbImage(obj, rgbimage)
            %set.RgbImage Set the value for property RgbImage
            validateattributes(rgbimage, {obj.SensorMsgsImageClass}, {'nonempty', 'scalar'}, 'Observation', 'RgbImage');
            
            obj.JavaMessage.setRgbImage(rgbimage.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RgbImage)
                obj.Cache.RgbImage.setJavaObject(rgbimage.getJavaObject);
            end
        end
        
        function detections = get.Detections(obj)
            %get.Detections Get the value for property Detections
            if isempty(obj.Cache.Detections)
                javaArray = obj.JavaMessage.getDetections;
                array = obj.readJavaArray(javaArray, obj.RvMsgsDetectionClass);
                obj.Cache.Detections = feval(obj.RvMsgsDetectionClass, array);
            end
            detections = obj.Cache.Detections;
        end
        
        function set.Detections(obj, detections)
            %set.Detections Set the value for property Detections
            if ~isvector(detections) && isempty(detections)
                % Allow empty [] input
                detections = feval([obj.RvMsgsDetectionClass '.empty'], 0, 1);
            end
            
            validateattributes(detections, {obj.RvMsgsDetectionClass}, {'vector'}, 'Observation', 'Detections');
            
            javaArray = obj.JavaMessage.getDetections;
            array = obj.writeJavaArray(detections, javaArray, obj.RvMsgsDetectionClass);
            obj.JavaMessage.setDetections(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Detections)
                obj.Cache.Detections = [];
                obj.Cache.Detections = obj.Detections;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.DepthInfo = [];
            obj.Cache.DepthImage = [];
            obj.Cache.RgbInfo = [];
            obj.Cache.RgbImage = [];
            obj.Cache.Detections = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.DepthInfo = copy(obj.DepthInfo);
            cpObj.DepthImage = copy(obj.DepthImage);
            cpObj.RgbInfo = copy(obj.RgbInfo);
            cpObj.RgbImage = copy(obj.RgbImage);
            cpObj.Detections = copy(obj.Detections);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.DepthInfo = feval([obj.SensorMsgsCameraInfoClass '.loadobj'], strObj.DepthInfo);
            obj.DepthImage = feval([obj.SensorMsgsImageClass '.loadobj'], strObj.DepthImage);
            obj.RgbInfo = feval([obj.SensorMsgsCameraInfoClass '.loadobj'], strObj.RgbInfo);
            obj.RgbImage = feval([obj.SensorMsgsImageClass '.loadobj'], strObj.RgbImage);
            DetectionsCell = arrayfun(@(x) feval([obj.RvMsgsDetectionClass '.loadobj'], x), strObj.Detections, 'UniformOutput', false);
            obj.Detections = vertcat(DetectionsCell{:});
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.DepthInfo = saveobj(obj.DepthInfo);
            strObj.DepthImage = saveobj(obj.DepthImage);
            strObj.RgbInfo = saveobj(obj.RgbInfo);
            strObj.RgbImage = saveobj(obj.RgbImage);
            strObj.Detections = arrayfun(@(x) saveobj(x), obj.Detections);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.rv_msgs.Observation.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.rv_msgs.Observation;
            obj.reload(strObj);
        end
    end
end
